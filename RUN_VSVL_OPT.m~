%RUN_VS_OPT designs VS BIR4 or BIR8 with optimized at a user defined range
% of B0 and B1.
%
%   Author: Vanessa, adapted from Terrence Jao
%   Date: ...
%   References:

%% Pulse Timing Calculation
clear all; close all;
% -------------------------------------------------------------------------
% Do we want to plot?
ploton = 0;
% Do we want to display messages?
verbose = 1;        %Turn off verbose for slightly faster runtime

B1_val_hp = 3.2; %10.20; % uT
B1_val_inv = 10.20; % uT
Grad_val = 1.45; % mT/cm

% durations (mS)
grad_ramp = 0.302; 
Tgap = 0; %0.1; % primarily for eddy current artifacts

% sampling periods
dtGz = 0.002;

comp_hp = 0;
comp_inv = 0; % 90-180-90, 90-240-90, 90-360-90
single_refocus = 1; %0,1
grad_var = 3;
sinc_weight = 1;
num_sp = 9; % 5,9


    fvalprev = inf;
    
    rf_weight = dzrf(num_sp,8,'inv','max',0.1,0.001);
    hpscale = num_sp/sum(rf_weight)*rf_weight;
    
    init_vals = hpscale;
    
    %model = @(x) vsvlimFun(x, b1nom, Vc, ramp_time, grad_wait, ...
    %    dtRF, dtG, df, b1scale, v, T1, T2);
    
    model = @(x) opt_FVEVS(grad_ramp,Grad_val,B1_val_hp,B1_val_inv,Tgap, comp_inv, grad_var, comp_hp,single_refocus,sinc_weight,num_sp, x)

    options = optimoptions(@fmincon,'MaxIterations',10000, ...
                    'MaxFunctionEvaluations',10000, ...
                    'OptimalityTolerance',1e-8, ...
                    'ConstraintTolerance',1e-8)
    
    lb = -0.102*ones(1,num_sp);
    ub = 0.102*ones(1,num_sp);
    
    
    [est, fval]= fmincon(model,init_vals,[],[],[],[],lb,ub,[],options);
    est_opts(itr,:) = est;
    fval_opts(itr,:) = fval;
    %%
    
    %Stopping Criteria
    if abs(fvalprev-fval) < 1e-5
        break;
    else
        fvalprev = fval;
    end
    
    if verbose; fprintf('\nOptimization Complete\n'); end;
    
end

% % %% from NAM
% n = 8;
% x_param4 = zeros(n^8,9, 'double');
% x = zeros(1,9);
% for idx1 = 1:n
%     x(1)=-pi + pi/4*(idx1-1);
%     for idx2 = 1:n
%         x(2)=-pi + pi/4*(idx2-1);
%         for idx3 = 1:n
%             x(3)=-pi + pi/4*(idx3-1);
%             for idx4 = 1
%                 x(4)=0;
%                 for idx5 = 1:n
%                     x(5)=-pi + pi/4*(idx5-1);
%                     for idx6 = 1:n
%                         x(6)=-pi + pi/4*(idx6-1);
%                         for idx7 = 1:n
%                             x(7)=-pi + pi/4*(idx7-1);
%                             for idx8 = 1:n
%                                 x(8)=-pi + pi/4*(idx8-1);
%                                 for idx9 = 1:n
%                                     x(9)=-pi + pi/4*(idx9-1);
%                                     x_param4((idx1-1)*n^8 + (idx2-1)*n^7 +  ...
%                                         (idx3-1)*n^6 + (idx4-1)*n^5 +  ...
%                                         (idx5- 1)*n^4 + (idx6- 1)*n^3 + ...
%                                         (idx7- 1)*n^2 + (idx8- 1)*n^1 + idx9,:) = x;
%                                 end
%                             end
%                         end
%                     end
%                 end
%             end
%         end
%     end
% end
% 
% %%
% 
% %profile on
% tic;
% parfor idx = 1:size(x_param4,1);
%    J(idx) = vsvlimFun([x_param4(idx,:) phi_inv], b1nom, Vc, ramp_time, grad_wait, ...
%             dtRF*1e-3, dtG, df, b1scale, v, T1, T2);
% end
% toc;



%% ------------------------------------------------------------------------
%Running Simulation with Different Parameters
%--------------------------------------------------------------------------
% x = [phi_sp phi_inv];  
% for ii=1:5
%     x(1)=-pi + pi/2*(ii-1);
%     for jj=1:5
%         x(2)=-pi + pi/2*(jj-1);
%         for kk=1:5
%             x(3)=-pi + pi/2*(kk-1);
%             for ll=1
%                 x(4)=0;
%                 for mm=1:5
%                     x(5)=-pi + pi/2*(mm-1);
%                     for nn=1:9
%                         x(6)=-pi + pi/4*(nn-1);
%                         for oo=1:9
%                             x(7)=-pi + pi/4*(oo-1);
%                             for pp=1:5
%                                 x(8)=-pi + pi/2*(pp-1);
%                                 for qq=1:5
%                                     x(9)=-pi + pi/2*(qq-1);   
%                                     J(ii,jj,kk,ll,mm,nn,oo,pp,qq) = ...
%                                     vsvlimFun(x, b1nom, Vc, ramp_time, grad_wait, ...
%                                     dtRF*1e-3, dtG, df, b1scale, v, T1, T2);           
%                                 end 
%                             end
%                         end                       
%                     end
%                 end
%             end
%         end
%         disp([ ' jj= ' num2str(kk) ' completed! ']);
%     end
%     disp([ ' ii= ' num2str(ii) ' completed! ']);
% 
% end
% 
% %%
% %load('J_2018_08_12') % <- Generate initial guesses!?
% idx = find(J == min(J(:)))
% 
% [I1,I2,I3,I4,I5,I6,I7,I8,I9] = ind2sub(size(J),idx);
% for itr = 1:size(I1)
% vals = [I1(itr),I2(itr),I3(itr),I4(itr),I5(itr),I6(itr),I7(itr),I8(itr),I9(itr)]
% end
